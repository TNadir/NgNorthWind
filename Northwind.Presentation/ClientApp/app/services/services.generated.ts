/* tslint:disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v11.3.3.0 (NJsonSchema v9.4.2.0) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import 'rxjs/add/observable/fromPromise';
import 'rxjs/add/observable/of';
import 'rxjs/add/observable/throw';
import 'rxjs/add/operator/map';
import 'rxjs/add/operator/toPromise';
import 'rxjs/add/operator/mergeMap';
import 'rxjs/add/operator/catch';

import { Observable } from 'rxjs/Observable';
import { Injectable, Inject, Optional, OpaqueToken } from '@angular/core';
import { Http, Headers, ResponseContentType, Response } from '@angular/http';

export const API_BASE_URL = new OpaqueToken('API_BASE_URL');

export interface ICustomersService {
    getCustomers(): Observable<CustomerListModel[] | null>;
    postCustomer(customer: CreateCustomerModel | null): Observable<CreateCustomerModel | null>;
    getCustomer(id: string): Observable<CustomerDetailModel | null>;
    putCustomer(id: string, customer: UpdateCustomerModel | null): Observable<void>;
    deleteCustomer(id: string): Observable<void>;
}

@Injectable()
export class CustomersService implements ICustomersService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;


    
    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    getCustomers(): Observable<CustomerListModel[] | null> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCustomers(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCustomers(response_);
                } catch (e) {
                    return <Observable<CustomerListModel[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<CustomerListModel[]>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomers(response: Response): Observable<CustomerListModel[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: CustomerListModel[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(CustomerListModel.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<CustomerListModel[] | null>(<any>null);
    }

    postCustomer(customer: CreateCustomerModel | null): Observable<CreateCustomerModel | null> {
        let url_ = this.baseUrl + "/api/Customers";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(customer);
        
        let options_ = {
            body: content_,
            method: "post",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPostCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPostCustomer(response_);
                } catch (e) {
                    return <Observable<CreateCustomerModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<CreateCustomerModel>><any>Observable.throw(response_);
        });
    }

    protected processPostCustomer(response: Response): Observable<CreateCustomerModel | null> {
        const status = response.status; 

        if (status === 400) {
            const _responseText = response.text();
            let result400: { [key: string] : string; } | null = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData400) {
                result400 = {};
                for (let key in resultData400) {
                    if (resultData400.hasOwnProperty(key))
                        result400[key] = resultData400[key] !== undefined ? resultData400[key] : <any>null;
                }
            }
            return throwException("A server error occurred.", status, _responseText, result400);
        } else if (status === 201) {
            const _responseText = response.text();
            let result201: CreateCustomerModel | null = null;
            let resultData201 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result201 = resultData201 ? CreateCustomerModel.fromJS(resultData201) : <any>null;
            return Observable.of(result201);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<CreateCustomerModel | null>(<any>null);
    }

    getCustomer(id: string): Observable<CustomerDetailModel | null> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processGetCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processGetCustomer(response_);
                } catch (e) {
                    return <Observable<CustomerDetailModel>><any>Observable.throw(e);
                }
            } else
                return <Observable<CustomerDetailModel>><any>Observable.throw(response_);
        });
    }

    protected processGetCustomer(response: Response): Observable<CustomerDetailModel | null> {
        const status = response.status; 

        if (status === 404) {
            const _responseText = response.text();
            return throwException("A server error occurred.", status, _responseText);
        } else if (status === 200) {
            const _responseText = response.text();
            let result200: CustomerDetailModel | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 ? CustomerDetailModel.fromJS(resultData200) : <any>null;
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<CustomerDetailModel | null>(<any>null);
    }

    putCustomer(id: string, customer: UpdateCustomerModel | null): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(customer);
        
        let options_ = {
            body: content_,
            method: "put",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processPutCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processPutCustomer(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processPutCustomer(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 400) {
            const _responseText = response.text();
            let result400: { [key: string] : string; } | null = null;
            let resultData400 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData400) {
                result400 = {};
                for (let key in resultData400) {
                    if (resultData400.hasOwnProperty(key))
                        result400[key] = resultData400[key] !== undefined ? resultData400[key] : <any>null;
                }
            }
            return throwException("A server error occurred.", status, _responseText, result400);
        } else if (status === 204) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }

    deleteCustomer(id: string): Observable<void> {
        let url_ = this.baseUrl + "/api/Customers/{id}";
        if (id === undefined || id === null)
            throw new Error("The parameter 'id' must be defined.");
        url_ = url_.replace("{id}", encodeURIComponent("" + id)); 
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "delete",
            headers: new Headers({
                "Content-Type": "application/json", 
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processDeleteCustomer(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processDeleteCustomer(response_);
                } catch (e) {
                    return <Observable<void>><any>Observable.throw(e);
                }
            } else
                return <Observable<void>><any>Observable.throw(response_);
        });
    }

    protected processDeleteCustomer(response: Response): Observable<void> {
        const status = response.status; 

        if (status === 204) {
            const _responseText = response.text();
            return Observable.of<void>(<any>null);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<void>(<any>null);
    }
}

export interface ISampleDataService {
    weatherForecasts(): Observable<WeatherForecast[] | null>;
}

@Injectable()
export class SampleDataService implements ISampleDataService {
    private http: Http;
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(@Inject(Http) http: Http, @Optional() @Inject(API_BASE_URL) baseUrl?: string) {
        this.http = http;
        this.baseUrl = baseUrl ? baseUrl : "http://localhost:5000";
    }

    weatherForecasts(): Observable<WeatherForecast[] | null> {
        let url_ = this.baseUrl + "/api/SampleData/WeatherForecasts";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = {
            method: "get",
            headers: new Headers({
                "Content-Type": "application/json", 
                "Accept": "application/json"
            })
        };

        return this.http.request(url_, options_).flatMap((response_) => {
            return this.processWeatherForecasts(response_);
        }).catch((response_: any) => {
            if (response_ instanceof Response) {
                try {
                    return this.processWeatherForecasts(response_);
                } catch (e) {
                    return <Observable<WeatherForecast[]>><any>Observable.throw(e);
                }
            } else
                return <Observable<WeatherForecast[]>><any>Observable.throw(response_);
        });
    }

    protected processWeatherForecasts(response: Response): Observable<WeatherForecast[] | null> {
        const status = response.status; 

        if (status === 200) {
            const _responseText = response.text();
            let result200: WeatherForecast[] | null = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (resultData200 && resultData200.constructor === Array) {
                result200 = [];
                for (let item of resultData200)
                    result200.push(WeatherForecast.fromJS(item));
            }
            return Observable.of(result200);
        } else if (status !== 200 && status !== 204) {
            const _responseText = response.text();
            return throwException("An unexpected server error occurred.", status, _responseText);
        }
        return Observable.of<WeatherForecast[] | null>(<any>null);
    }
}

export class CustomerListModel implements ICustomerListModel {
    id?: string | null;
    name?: string | null;

    constructor(data?: ICustomerListModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.name = data["name"] !== undefined ? data["name"] : <any>null;
        }
    }

    static fromJS(data: any): CustomerListModel {
        let result = new CustomerListModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["name"] = this.name !== undefined ? this.name : <any>null;
        return data; 
    }
}

export interface ICustomerListModel {
    id?: string | null;
    name?: string | null;
}

export class CustomerDetailModel implements ICustomerDetailModel {
    id?: string | null;
    address?: string | null;
    city?: string | null;
    companyName?: string | null;
    contactName?: string | null;
    contactTitle?: string | null;
    country?: string | null;
    fax?: string | null;
    phone?: string | null;
    postalCode?: string | null;
    region?: string | null;

    constructor(data?: ICustomerDetailModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.id = data["id"] !== undefined ? data["id"] : <any>null;
            this.address = data["address"] !== undefined ? data["address"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.contactName = data["contactName"] !== undefined ? data["contactName"] : <any>null;
            this.contactTitle = data["contactTitle"] !== undefined ? data["contactTitle"] : <any>null;
            this.country = data["country"] !== undefined ? data["country"] : <any>null;
            this.fax = data["fax"] !== undefined ? data["fax"] : <any>null;
            this.phone = data["phone"] !== undefined ? data["phone"] : <any>null;
            this.postalCode = data["postalCode"] !== undefined ? data["postalCode"] : <any>null;
            this.region = data["region"] !== undefined ? data["region"] : <any>null;
        }
    }

    static fromJS(data: any): CustomerDetailModel {
        let result = new CustomerDetailModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id !== undefined ? this.id : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["contactTitle"] = this.contactTitle !== undefined ? this.contactTitle : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["fax"] = this.fax !== undefined ? this.fax : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        return data; 
    }
}

export interface ICustomerDetailModel {
    id?: string | null;
    address?: string | null;
    city?: string | null;
    companyName?: string | null;
    contactName?: string | null;
    contactTitle?: string | null;
    country?: string | null;
    fax?: string | null;
    phone?: string | null;
    postalCode?: string | null;
    region?: string | null;
}

export class CreateCustomerModel implements ICreateCustomerModel {
    customerId?: string | null;
    address?: string | null;
    city?: string | null;
    companyName: string;
    contactName?: string | null;
    contactTitle?: string | null;
    country?: string | null;
    fax?: string | null;
    phone?: string | null;
    postalCode?: string | null;
    region?: string | null;

    constructor(data?: ICreateCustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"] !== undefined ? data["customerId"] : <any>null;
            this.address = data["address"] !== undefined ? data["address"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.contactName = data["contactName"] !== undefined ? data["contactName"] : <any>null;
            this.contactTitle = data["contactTitle"] !== undefined ? data["contactTitle"] : <any>null;
            this.country = data["country"] !== undefined ? data["country"] : <any>null;
            this.fax = data["fax"] !== undefined ? data["fax"] : <any>null;
            this.phone = data["phone"] !== undefined ? data["phone"] : <any>null;
            this.postalCode = data["postalCode"] !== undefined ? data["postalCode"] : <any>null;
            this.region = data["region"] !== undefined ? data["region"] : <any>null;
        }
    }

    static fromJS(data: any): CreateCustomerModel {
        let result = new CreateCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId !== undefined ? this.customerId : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["contactTitle"] = this.contactTitle !== undefined ? this.contactTitle : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["fax"] = this.fax !== undefined ? this.fax : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        return data; 
    }
}

export interface ICreateCustomerModel {
    customerId?: string | null;
    address?: string | null;
    city?: string | null;
    companyName: string;
    contactName?: string | null;
    contactTitle?: string | null;
    country?: string | null;
    fax?: string | null;
    phone?: string | null;
    postalCode?: string | null;
    region?: string | null;
}

export class UpdateCustomerModel implements IUpdateCustomerModel {
    customerId?: string | null;
    address?: string | null;
    city?: string | null;
    companyName: string;
    contactName?: string | null;
    contactTitle?: string | null;
    country?: string | null;
    fax?: string | null;
    phone?: string | null;
    postalCode?: string | null;
    region?: string | null;

    constructor(data?: IUpdateCustomerModel) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.customerId = data["customerId"] !== undefined ? data["customerId"] : <any>null;
            this.address = data["address"] !== undefined ? data["address"] : <any>null;
            this.city = data["city"] !== undefined ? data["city"] : <any>null;
            this.companyName = data["companyName"] !== undefined ? data["companyName"] : <any>null;
            this.contactName = data["contactName"] !== undefined ? data["contactName"] : <any>null;
            this.contactTitle = data["contactTitle"] !== undefined ? data["contactTitle"] : <any>null;
            this.country = data["country"] !== undefined ? data["country"] : <any>null;
            this.fax = data["fax"] !== undefined ? data["fax"] : <any>null;
            this.phone = data["phone"] !== undefined ? data["phone"] : <any>null;
            this.postalCode = data["postalCode"] !== undefined ? data["postalCode"] : <any>null;
            this.region = data["region"] !== undefined ? data["region"] : <any>null;
        }
    }

    static fromJS(data: any): UpdateCustomerModel {
        let result = new UpdateCustomerModel();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["customerId"] = this.customerId !== undefined ? this.customerId : <any>null;
        data["address"] = this.address !== undefined ? this.address : <any>null;
        data["city"] = this.city !== undefined ? this.city : <any>null;
        data["companyName"] = this.companyName !== undefined ? this.companyName : <any>null;
        data["contactName"] = this.contactName !== undefined ? this.contactName : <any>null;
        data["contactTitle"] = this.contactTitle !== undefined ? this.contactTitle : <any>null;
        data["country"] = this.country !== undefined ? this.country : <any>null;
        data["fax"] = this.fax !== undefined ? this.fax : <any>null;
        data["phone"] = this.phone !== undefined ? this.phone : <any>null;
        data["postalCode"] = this.postalCode !== undefined ? this.postalCode : <any>null;
        data["region"] = this.region !== undefined ? this.region : <any>null;
        return data; 
    }
}

export interface IUpdateCustomerModel {
    customerId?: string | null;
    address?: string | null;
    city?: string | null;
    companyName: string;
    contactName?: string | null;
    contactTitle?: string | null;
    country?: string | null;
    fax?: string | null;
    phone?: string | null;
    postalCode?: string | null;
    region?: string | null;
}

export class WeatherForecast implements IWeatherForecast {
    dateFormatted?: string | null;
    temperatureC: number;
    summary?: string | null;
    temperatureF: number;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(data?: any) {
        if (data) {
            this.dateFormatted = data["dateFormatted"] !== undefined ? data["dateFormatted"] : <any>null;
            this.temperatureC = data["temperatureC"] !== undefined ? data["temperatureC"] : <any>null;
            this.summary = data["summary"] !== undefined ? data["summary"] : <any>null;
            this.temperatureF = data["temperatureF"] !== undefined ? data["temperatureF"] : <any>null;
        }
    }

    static fromJS(data: any): WeatherForecast {
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["dateFormatted"] = this.dateFormatted !== undefined ? this.dateFormatted : <any>null;
        data["temperatureC"] = this.temperatureC !== undefined ? this.temperatureC : <any>null;
        data["summary"] = this.summary !== undefined ? this.summary : <any>null;
        data["temperatureF"] = this.temperatureF !== undefined ? this.temperatureF : <any>null;
        return data; 
    }
}

export interface IWeatherForecast {
    dateFormatted?: string | null;
    temperatureC: number;
    summary?: string | null;
    temperatureF: number;
}

export class SwaggerException extends Error {
    message: string;
    status: number; 
    response: string; 
    result: any; 

    constructor(message: string, status: number, response: string, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.result = result;
    }
}

function throwException(message: string, status: number, response: string, result?: any): Observable<any> {
    if(result !== null && result !== undefined)
        return Observable.throw(result);
    else
        return Observable.throw(new SwaggerException(message, status, response, null));
}

function blobToText(blob: any): Observable<string> {
    return new Observable<string>((observer: any) => { 
        let reader = new FileReader(); 
        reader.onload = function() { 
            observer.next(this.result);
            observer.complete();
        }
        reader.readAsText(blob); 
    });
}